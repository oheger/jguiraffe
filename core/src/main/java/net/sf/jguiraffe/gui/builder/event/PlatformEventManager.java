/*
 * Copyright 2006-2014 The JGUIraffe Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.jguiraffe.gui.builder.event;

import net.sf.jguiraffe.gui.forms.ComponentHandler;

/**
 * <p>
 * Definition of an interface for dealing with platform (i.e. a specific GUI
 * library) specific events.
 * </p>
 * <p>
 * This interface defines the link between the generic event handling mechanism
 * provided by the form framework and the library specific event handling
 * support. A concrete implementation has to intercept native component events
 * and transform them into the generic event types. Then the transformed events
 * are passed to the {@link FormEventManager}.
 * </p>
 * <p>
 * This interface defines only methods for registering and deregistering event
 * listeners of a certain type at a component defined by a
 * <code>ComponentHandler</code> object. These methods will be called by the
 * {@link FormEventManager} class, which will already perform some
 * synchronization and pre-processing. So it is guaranteed that synchronization
 * is performed on the form listener type, i.e. no listeners of the same type
 * will be added or removed concurrently. <code>FormEventManager</code> will
 * further invoke the <code>registerListener</code> method only once for a
 * combination of component handler and event listener type. This means that the
 * <code>FormEventManager</code> instance is the only event listener for the
 * available components; is is itself responsible for multiplexing of event
 * notifications. These facts can be used by a concrete implementation for doing
 * some optimization.
 * </p>
 * <p>
 * Note: It cannot be guaranteed that all {@link ComponentHandler} objects
 * passed to the methods defined by this interface have been created by the
 * current {@code ComponentManager}. For instance, there can be other custom
 * handler implementations created by special tag handler classes. This may be
 * an issue for platform-specific implementations that expect the {@code
 * ComponentHandler} objects to be derived from a specific base class.
 * </p>
 *
 * @author Oliver Heger
 * @version $Id: PlatformEventManager.java 205 2012-01-29 18:29:57Z oheger $
 */
public interface PlatformEventManager
{
    /**
     * Registers an event listener of the given type at the specified component.
     * This method is called when the first event listener of the affected type
     * is registered at this component. The <code>FormEventManager</code> then
     * registers itself as event listener so that it can multiplex incoming
     * events to all registered listeners.
     *
     * @param name the component's name (must be contained in the
     *        {@link FormEvent} objects generated by this implementation)
     * @param handler the component handler of the affected component
     * @param eventManager the event manager that must be invoked when an event
     *        occurs
     * @param type the event listener type
     */
    void registerListener(String name, ComponentHandler<?> handler,
            FormEventManager eventManager, FormListenerType type);

    /**
     * Removes an event listener of the given type from the specified component.
     * This method is called by the <code>FormEventManager</code> when the last
     * event listener of the affected type deregisters from this component.
     *
     * @param name the name of the affected component
     * @param handler the component handler of this component
     * @param eventManager the event manager
     * @param type the event listener type
     */
    void unregisterListener(String name, ComponentHandler<?> handler,
            FormEventManager eventManager, FormListenerType type);
}
