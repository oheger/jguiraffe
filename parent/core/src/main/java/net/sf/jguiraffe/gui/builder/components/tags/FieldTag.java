/*
 * Copyright 2006-2016 The JGUIraffe Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.jguiraffe.gui.builder.components.tags;

import net.sf.jguiraffe.gui.builder.components.ComponentManager;
import net.sf.jguiraffe.gui.builder.components.FormBuilderException;
import net.sf.jguiraffe.gui.forms.ComponentHandler;

/**
 * <p>
 * A specific input component tag that allows to make use of custom input
 * components.
 * </p>
 * <p>
 * The idea behind this tag is to support a custom implementation of the
 * {@link net.sf.jguiraffe.gui.forms.ComponentHandler ComponentHandler}
 * interface that can be defined by a tag in the body of this tag. This
 * component handler will then be added to the
 * {@link net.sf.jguiraffe.gui.forms.Form Form} object constructed during the
 * builder process, and - if it contains a component - to the generated GUI.
 * </p>
 * <p>
 * This mechanism can be used to add components to the generated GUI that are
 * not supported per default by the form builder library. Therefore it is only
 * necessary to provide a specific <code>ComponentHandler</code> implementation
 * that makes the new component accessible for the <code>Form</code> object.
 * </p>
 * <p>
 * Another use case is to provide a different data model for some components
 * generated by other tags. The default example for this is a group of radio
 * buttons: Typically one would like to avoid storing the state of each button
 * in the group; it is preferable to make a conversion, e.g. storing the index
 * of the selected button as an int. This use case can be addressed by a
 * concrete
 * {@link net.sf.jguiraffe.gui.builder.components.CompositeComponentHandler
 * CompositeComponentHandler} implementation, to which the associated component
 * handlers can be added. The composite component handler can then be
 * implemented in a way that it somehow transforms the data of the contained
 * components and passes this transformed value to the owning form object.
 * </p>
 * <p>
 * This tag handler class inherits from <code>InputComponentTag</code> and thus
 * supports all attributes defined by its parent class. Especially the
 * definition of transformers and validators is possible, which can play
 * together with the component handler set for this tag.
 * </p>
 *
 * @see ComponentHandlerTag
 * @author Oliver Heger
 * @version $Id: FieldTag.java 205 2012-01-29 18:29:57Z oheger $
 */
public class FieldTag extends InputComponentTag
{
    /** Stores the explicitly set component handler. */
    private ComponentHandler<?> bodyComponentHandler;

    /**
     * Sets the component handler to be used by this tag. This method is
     * intended to be called by tags in this tag's body. The
     * <code>createComponentHandler()</code> method will then return the
     * component handler passed to this method.
     *
     * @param componentHandler the component handler to use
     */
    public void setComponentHandler(ComponentHandler<?> componentHandler)
    {
        bodyComponentHandler = componentHandler;
    }

    /**
     * Returns the component handler to be used by the component that is
     * represented by this tag. This implementation just returns the handler
     * that was set using the
     * {@link #setComponentHandler(ComponentHandler)} method. So
     * in this tag's body there must have been a component that has already set
     * this data.
     *
     * @param manager the component manager
     * @param create the create flag
     * @return the new component handler
     * @throws FormBuilderException if no component handler has been set
     */
    @Override
    protected ComponentHandler<?> createComponentHandler(ComponentManager manager,
            boolean create) throws FormBuilderException
    {
        if (create)
        {
            return null;
        }
        else
        {
            if (bodyComponentHandler == null)
            {
                throw new FormBuilderException(
                        "No component handler has been set!");
            }
            return bodyComponentHandler;
        }
    }
}
