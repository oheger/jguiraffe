<?xml version="1.0" encoding="ISO-8859-1"?>
<!--

    Copyright 2006-2016 The JGUIraffe Team.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!--
  Jelly test script for testing the tags of the dependency injection framework.
  $Id: di.jelly 207 2012-02-09 07:30:13Z oheger $
-->
<j:jelly xmlns:j="jelly:core" xmlns:di="diBuilder">
  <!-- A bean to be stored in the root store.-->
  <di:bean name="rootBean" beanClass="net.sf.jguiraffe.di.ReflectionTestClass"/>

  <!-- Constant values -->
  <di:store name="const">
    <di:bean name="intConst" value="42" valueClass="java.lang.Integer"/>
    <di:bean name="strConst" value="Test"/>
  </di:store>
  
  <!-- This is the default bean store.-->
  <di:store name="beans" parentName="const">
    <!-- A default singleton bean.-->
    <di:bean name="singletonBean" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
      <di:constructor>
        <di:param parameterClass="java.lang.String" refName="strConst"/>
        <di:param refName="intConst"/>
      </di:constructor>
    </di:bean>

    <!-- A bean with literal values passed to the constructor -->
    <di:bean name="singletonBeanValues"
      beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
      <di:constructor>
        <di:param parameterClass="java.lang.String" value="Test"/>
        <di:param value="42"/>
      </di:constructor>
    </di:bean>

	<!-- A default factory bean.-->
    <di:bean name="factoryBean" singleton="false"
      beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
      <di:constructor>
        <di:param parameterClass="java.lang.String" refName="strConst"/>
        <di:param refName="intConst"/>
      </di:constructor>
    </di:bean>

	<!-- A singleton bean created using a factory method.-->
	<di:bean name="factoryMethodSingleton" singleton="true"
	  beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
	  <di:factory>
	    <di:methodInvocation method="getInstance"
	      targetClass="net.sf.jguiraffe.di.ReflectionTestClass">
          <di:param refName="strConst"/>
          <di:param refName="intConst"/>
	    </di:methodInvocation>
	  </di:factory>
	</di:bean>

    <!-- A factory bean created using a factory method.-->
	<di:bean name="factoryMethodFactory" singleton="false"
	  beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
	  <di:factory>
	    <di:methodInvocation method="getInstance"
	      targetClass="net.sf.jguiraffe.di.ReflectionTestClass">
          <di:param refName="strConst"/>
          <di:param refName="intConst"/>
	    </di:methodInvocation>
	  </di:factory>
	</di:bean>

    <!-- A factory bean created using a factory method which uses literal values
         for parameters.
    -->
    <di:bean name="factoryMethodFactoryValues" singleton="false"
      beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
      <di:factory>
        <di:methodInvocation method="getInstance"
          targetClass="net.sf.jguiraffe.di.ReflectionTestClass">
          <di:param value="Test"/>
          <di:param value="42"/>
        </di:methodInvocation>
      </di:factory>
    </di:bean>

    <!-- A bean with property set operation using literal values -->
    <di:bean name="propertyBeanValues"
      beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
      <di:setProperty property="intProp" value="42"/>
      <di:setProperty property="stringProp" value="Test"/>
    </di:bean>

	<!-- A bean with a complex initialization script.-->
	<di:bean name="initializer" singleton="false"
	  beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
	  <di:constructorInvocation targetClassName="java.lang.StringBuilder"
	    result="buf"/>
	  <di:methodInvocation method="append" source="buf">
	    <di:param parameterClass="java.lang.String" refName="strConst"/>
	  </di:methodInvocation>
	  <di:methodInvocation method="append" source="buf">
	    <di:param parameterClass="java.lang.String" refName="strConst"/>
	  </di:methodInvocation>
	  <di:methodInvocation method="toString" source="buf" result="s"/>
	  <di:setProperty property="stringProp" var="s"/>

      <di:methodInvocation method="valueOf" targetClass="java.math.BigInteger"
        static="true" result="i1">
        <di:param refName="intConst"/>
      </di:methodInvocation>
	  <di:constructorInvocation targetClass="java.math.BigInteger" result="i2">
	    <di:param value="2"/>
	  </di:constructorInvocation>
	  <di:methodInvocation method="multiply" source="i1" result="product">
	    <di:param var="i2"/>
	  </di:methodInvocation>
	  <di:methodInvocation method="intValue" source="product" result="i"/>
	  <di:setProperty property="intProp" var="i"/>
	</di:bean>

    <di:store name="special">
      <di:bean name="specialBeanA" singleton="false"
        beanClassName="net.sf.jguiraffe.di.impl.providers.TestBeanProviders$BeanA">
        <di:setProperty property="refB" refName="specialBeanB"/>
      </di:bean>
    </di:store>
  </di:store>

  <di:bean name="specialBeanB" singleton="false" store="special"
    beanClassName="net.sf.jguiraffe.di.impl.providers.TestBeanProviders$BeanB">
    <di:constructor>
      <di:param refName="specialBeanA"/>
    </di:constructor>
  </di:bean>

  <!-- An anonymous bean declaration.-->
  <di:bean name="anonymous"
    beanClassName="net.sf.jguiraffe.di.impl.providers.TestBeanProviders$BeanB">
    <di:constructor>
      <di:param>
        <di:bean
          beanClassName="net.sf.jguiraffe.di.impl.providers.TestBeanProviders$BeanA">
          <di:setProperty property="testData">
            <di:bean beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
              <di:constructor>
                <di:param parameterClass="java.lang.String" refName="strConst"/>
                <di:param refName="intConst"/>
              </di:constructor>
            </di:bean>
          </di:setProperty>
        </di:bean>
      </di:param>
    </di:constructor>
  </di:bean>

  <!-- A list definition -->
  <di:bean name="list" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:list elementClassName="java.lang.Integer">
        <di:element value="1"/>
        <di:element value="2"/>
        <di:element value="1000" valueClassName="java.lang.Long"/>
      </di:list>
    </di:setProperty>
  </di:bean>

  <!-- A top-level list bean -->
  <di:list name="topLevelList" elementClassName="java.lang.Integer">
    <di:element value="1"/>
    <di:element value="2"/>
    <di:element value="1000" valueClassName="java.lang.Long"/>
  </di:list>

  <!-- A list that contains a null element -->
  <di:bean name="listNull" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:list>
        <di:element value="1"/>
        <di:element/>
        <di:element value="3"/>
      </di:list>
    </di:setProperty>
  </di:bean>

  <!-- A list with elements that reference other beans -->
  <di:bean name="listDependency" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:list>
        <di:element value="1"/>
        <di:element refName="intConst"/>
        <di:element refName="strConst"/>
      </di:list>
    </di:setProperty>
  </di:bean>

  <!-- A set definition -->
  <di:bean name="set" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:set elementClassName="java.lang.Integer">
        <di:element value="1"/>
        <di:element value="2"/>
        <di:element value="1000" valueClassName="java.lang.Long"/>
      </di:set>
    </di:setProperty>
  </di:bean>

  <!-- A top-level set bean -->
  <di:set name="topLevelSet" elementClassName="java.lang.Integer">
    <di:element value="1"/>
    <di:element value="2"/>
    <di:element value="1000" valueClassName="java.lang.Long"/>
  </di:set>

  <!-- A definition of an ordered set -->
  <di:bean name="orderedset" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:set elementClassName="java.lang.Integer" ordered="true">
        <di:element value="1"/>
        <di:element value="2"/>
        <di:element value="1000" valueClassName="java.lang.Long"/>
      </di:set>
    </di:setProperty>
  </di:bean>

  <!-- A definition of a map -->
  <di:bean name="map" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:map valueClass="java.lang.Integer">
        <di:entry key="key1" value="1"/>
        <di:entry key="key2" value="2"/>
        <di:entry key="key3" value="1000" valueClass="java.lang.Long"/>
      </di:map>
    </di:setProperty>
  </di:bean>

  <!-- A top-level map bean -->
  <di:map name="topLevelMap" valueClass="java.lang.Integer">
    <di:entry key="key1" value="1"/>
    <di:entry key="key2" value="2"/>
    <di:entry key="key3" value="1000" valueClass="java.lang.Long"/>
  </di:map>

  <!-- A definition of an ordered map -->
  <di:bean name="orderedmap" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:map valueClass="java.lang.Integer" ordered="true">
        <di:entry key="key1" value="1"/>
        <di:entry key="key2" value="2"/>
        <di:entry key="key3" value="1000" valueClass="java.lang.Long"/>
      </di:map>
    </di:setProperty>
  </di:bean>

  <!-- A map with complex objects as key and value -->
  <di:bean name="mapcomplex" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:map>
        <di:entry>
          <di:entryKey>
            <di:list elementClassName="java.lang.Integer">
              <di:element value="1"/>
              <di:element value="2"/>
              <di:element value="1000" valueClassName="java.lang.Long"/>
            </di:list>
          </di:entryKey>
          <di:set elementClassName="java.lang.Integer" ordered="true">
            <di:element value="1"/>
            <di:element value="2"/>
            <di:element value="1000" valueClassName="java.lang.Long"/>
          </di:set>
        </di:entry>
      </di:map>
    </di:setProperty>
  </di:bean>

  <!-- A map with dependencies to other beans -->
  <di:bean name="dependencymap" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:map valueClass="java.lang.Integer">
        <di:entry key="key1" value="1"/>
        <di:entry refName="intConst">
          <di:entryKey refName="strConst"/>
        </di:entry>
        <di:entry key="key3" value="1000" valueClass="java.lang.Long"/>
      </di:map>
    </di:setProperty>
  </di:bean>

  <!-- A properties object -->
  <di:bean name="properties" beanClassName="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="data">
      <di:properties>
        <di:entry key="db.usr" value="scott"/>
        <di:entry key="db.pwd" value="tiger"/>
        <di:entry key="db.src" value="defaultDS"/>
      </di:properties>
    </di:setProperty>
  </di:bean>

  <!-- A top-level properties bean -->
  <di:properties name="topLevelProps">
    <di:entry key="db.usr" value="scott"/>
    <di:entry key="db.pwd" value="tiger"/>
    <di:entry key="db.src" value="defaultDS"/>
  </di:properties>

  <!-- A bean for testing more complex initialization, including the
       BeanContextClient interface and creation listeners.
  -->
  <di:bean name="contextClient"
    beanClassName="net.sf.jguiraffe.gui.builder.impl.TestJellyBeanBuilder$TestBean">
    <di:constructor>
      <di:param parameterClass="java.lang.String" refName="strConst"/>
    </di:constructor>
    <di:setProperty property="intProp" refName="intConst"/>
    <di:setProperty property="data" refName="properties"/>
  </di:bean>

  <!-- A bean with a shutdown handler -->
  <di:bean name="shutdown" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="intProp" refName="intConst"/>
    <di:setProperty property="stringProp" refName="strConst"/>
    <di:shutdown>
      <di:setProperty property="intProp" value="0"/>
      <di:setProperty property="stringProp" value=""/>
    </di:shutdown>
  </di:bean>

  <!-- A bean that invokes a shutdown method -->
  <di:bean name="shutdownMeth" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:shutdown>
      <di:methodInvocation method="shutdown"/>
    </di:shutdown>
  </di:bean>

  <!-- Test of the value tag. We set a string value with multiple lines.-->
  <di:bean name="valueTest" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:constructor>
      <di:param>
        <di:value><![CDATA[Line 1
Line 2
Line 3]]></di:value>
      </di:param>
    </di:constructor>
  </di:bean>

  <!-- Tests whether the value tag does not escape its body.-->
  <di:bean name="valueTestEscape" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:constructor>
      <di:param>
        <di:value><![CDATA[<test value="test"></test>]]></di:value>
      </di:param>
    </di:constructor>
  </di:bean>

  <!-- Tests whether a parameter can be set to null.-->
  <di:bean name="nullParam" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:constructor>
      <di:param parameterClass="java.lang.String"><di:null/></di:param>
      <di:param valueClassName="java.lang.Integer" value="42"/>
    </di:constructor>
  </di:bean>

  <!-- Tests the constValue tag.-->
  <di:bean name="constValueParam" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:constructor>
      <di:param parameterClass="java.lang.String" value="Test constant value"/>
      <di:param>
        <di:const targetClass="net.sf.jguiraffe.di.ReflectionTestClass"
          field="ANSWER"/>
      </di:param>
    </di:constructor>
  </di:bean>

  <!-- A bean declaration setting an enum property -->
  <di:bean name="enumTest" beanClass="net.sf.jguiraffe.di.ReflectionTestClass">
    <di:setProperty property="mode" value="PRODUCTION"/>
  </di:bean>

  <!-- A bean with a complex initializer script which invokes a factory method
       on another bean.
   -->
  <di:bean name="factoryBeanScript" resultVar="result">
    <di:methodInvocation method="create" result="result">
      <di:param value="TestResult:"/>
      <di:invocationTarget refName="singletonBean"/>
    </di:methodInvocation>
  </di:bean>
</j:jelly>
