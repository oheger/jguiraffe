<?xml version="1.0"?>
<!--

    Copyright 2006-2015 The JGUIraffe Team.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!-- $Id: building.xml 213 2012-07-14 19:40:51Z oheger $ -->
<document>

  <properties>
    <author email="oheger@users.sourceforge.net">Oliver Heger</author>
    <title>Building from VCS</title>
  </properties>

<body>
  <section name="Checking out and building JGUIraffe">
  <p>
    <em>JGUIraffe</em> uses <a href="http://maven.apache.org">Apache Maven 3</a>
    as its build tool and <a href="http://git-scm.com/">git</a> as version
    control system (VCS). The source code repository can be cloned using the
    command
  </p>
    <source><![CDATA[
git clone git://git.code.sf.net/p/jguiraffe/git jguiraffe-git
    ]]></source>
  <p>
    This command produces a maven aggregator project with a couple of modules.
    The most important ones are the following:
    <ul>
      <li><code>core</code> is the main library defining the <em>JGUIraffe</em>
      abstractions for different UI platforms.</li>
      <li><code>swing</code> is the integration jar for Swing. This jar needs
      to be in the class path for applications running on Swing.</li>
      <li><code>java-fx</code> contains the JavaFX integration jar. It is needed
      for JavaFX applications.</li>
      <li><code>examples</code> contains some sample code and also the complete
      tutorial application.</li>
    </ul>
  </p>
  <p>
    For convenience the top-level directory contains a <code>pom.xml</code> for
    building the whole project including all its modules. Just execute the
    following command in this directory:
  </p>
    <source><![CDATA[
mvn clean install
    ]]></source>
  <p>
    This requires a JDK 1.6 because the <code>examples</code> module uses some
    1.6 features. The <code>core</code> module and the integration jars for
    specific UI platforms are compatible with JDK 1.5. They can be
    built with a 1.5 compiler by issuing the same command in the corresponding
    subdirectories. The resulting jar files containing all classes of the
    <em>JGUIraffe</em> library can be found in the <code>target</code>
    folders of the modules.
  </p>
  <p>
    <em>Note:</em> If you get an <code>OutOfMemoryError</code>, you have to
    increase the heap size for the Maven build. This can be achieved by setting
    the <em>MAVEN_OPTS</em> environment variable correspondingly, e.g.
    <code>MAVEN_OPTS=-Xmx256m</code> would increase the size of the heap space
    to 256 M.
  </p>
  <p>
    <em>Note:</em> The build executes all unit tests. Some test cases test
    error conditions which cause exceptions to be logged to the console. This
    is expected and does not indicate a problem with the build.
  </p>
  <p>
    The pom defines a profile named <em>release</em> which creates some
    additional artifacts. If it is activated, jars with Javadocs and the
    project's sources are produced. These jars can be integrated in typical IDEs.
    To activate this profile and generate the additional artifacts enter the
    following command (in the top-level directory):
  </p>
    <source><![CDATA[
mvn clean install -P release
    ]]></source>
  </section>
</body>

</document>
