<?xml version="1.0"?>
<!--

    Copyright 2006-2015 The JGUIraffe Team.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<document>

 <properties>
  <title>Project Setup and Multiple Platforms</title>
  <author email="oheger@users.sourceforge.net">Oliver Heger</author>
 </properties>

<body>
  <section name="Project setup">
  <p>
    This chapter gives an introduction how <em>JGUIraffe</em> is used to
    develop a UI-centric Java application.
  </p>
  <p>
    The main purpose of the <em>JGUIraffe</em> library is to simplify development
    of user interfaces. Windows, panels, and dialog boxes are defined in a
    declarative way using a XML-dialect. In addition to creating and arranging
    UI components, central objects implementing application logic can be
    instantiated and connected with each other or elements of the user
    interface. The remaining part of this user's guide describes these features
    in detail. But before we dive into the programming of user interfaces in the
    <em>JGUIraffe</em> way, we have to say a few words about the principle setup
    of a project using the <em>JGUIraffe</em> library.
  </p>
  <p>
    In order to make use of the features provided by this library in your own
    (Java-based) applications, some jars have to be added to the class path.
    To be more precise, two jars have to be included:
    <ul>
      <li>The main <code>jguiraffe.jar</code> containing central functionality
      and defining the specific programming model of <em>JGUIraffe</em>.</li>
      <li>A specialized integration jar for the UI platform used by the target
      application.</li>
    </ul>
  </p>

  <subsection name="Multiple platform support">
  <p>
    In a <em>JGUIraffe</em> application manipulations of UI elements are done
    through interfaces like
    <code><a href="../apidocs/net/sf/jguiraffe/gui/builder/components/WidgetHandler.html">
    WidgetHandler</a></code>, or
    <code><a href="../apidocs/net/sf/jguiraffe/gui/forms/ComponentHandler.html">
    ComponentHandler</a></code>. What actually lies behind these interfaces is
    transparent for the application. This makes it possible to offer specialized
    implementations for different UI platforms. With other words: one and the same
    <em>JGUIraffe</em> application can run on different UI platforms without
    changes.
  </p>
  <p>
    Currently, the following UI platforms are supported:
    <ul>
      <li>Swing</li>
      <li>JavaFX</li>
    </ul>
    The concrete platform to be used is selected by adding the corresponding
    integration jar to the class path. Note that exactly one integration jar
    is needed; adding multiple ones for different platforms can have
    unpredictable effects.
  </p>
  </subsection>

  <subsection name="Maven setup">
  <p>
    The <em>JGUIraffe</em> jars are distributed to the central repository of
    <a href="http://maven.apache.org">Apache Maven</a>. So if Maven is used as
    build tool, the <em>JGUIraffe</em>-related dependencies can be downloaded
    automatically. In order to simplify this setup, there is a
    <a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies">BOM</a>
    artifact defining all modules and their current versions. This artifact has
    to be included in the <em>&lt;dependencyManagement&gt;</em> section of your
    application's pom:
  </p>
<source><![CDATA[
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>net.sf.jguiraffe</groupId>
        <artifactId>jguiraffe-bom</artifactId>
        <version>1.3</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
]]></source>
  <p>
    To declare the actual <em>JGUIraffe</em> dependency, it is typically
    sufficient to reference the integration jar for the target UI platform.
    This causes the dependency to <em>JGUIraffe Core</em> to be added in a
    transitive way. So for instance, if the target platform was JavaFx, the
    following dependency would have to be declared:
  </p>
<source><![CDATA[
  <dependency>
    <groupId>net.sf.jguiraffe</groupId>
    <artifactId>jguiraffe-java-fx</artifactId>
  </dependency>
]]></source>
  <p>
    <em>Note:</em> If your application runs in an OSGi environment, refer to
    chapter <a href="osgi.html">JGUIraffe and OSGi</a>.
  </p>
  </subsection>
  </section>
</body>

</document>