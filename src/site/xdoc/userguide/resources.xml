<?xml version="1.0"?>
<!--

    Copyright 2006-2015 The JGUIraffe Team.

    Licensed under the Apache License, Version 2.0 (the "License")
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!-- $Id: resources.xml 205 2012-01-29 18:29:57Z oheger $ -->

<document>

 <properties>
  <title>Resources</title>
  <author email="oheger@users.sourceforge.net">Oliver Heger</author>
 </properties>

<body>
  <section name="Resources">
  <p>
    Modern desktop applications often need to support multiple languages if they
    serve a multi-lingual user base. Therefore the texts to be displayed in the
    graphical user interface cannot be hard-coded in the source code, but have
    to be externalized in some way. But even if an application addresses only
    users speaking the same language, it is good practice to keep the texts
    separated from the rest of the program code. This simplifies changes and
    keeps a possible upgrade path: if the application turns out to be a big
    success, a multi-lingual version may be required sooner than the developers
    thought - you never know.
  </p>
  <p>
    The Java SDK used to provide support for multi-lingual applications from the
    very beginning. Typically the <code>ResourceBundle</code> class is used for
    accessing data that may be translated into different languages. The actual
    texts are frequently stored in resource properties files, and
    <code>ResourceBundle</code> takes care that the correct texts for the
    currently active language (represented as a <code>java.util.Locale</code>
    object) are loaded. Many developers are familiar with this easy yet
    powerful approach.
  </p>
  <p>
    The <em>JGUIraffe</em> library also supports resources in various forms.
    It is especially easy to integrate resource properties files as used by the
    well-known <code>ResourceBundle</code> class; so developers do not have to
    change their way of thinking about resources dramatically. However, by
    providing alternative implementations for some of the fundamental interfaces
    that deal with access to resources, it is possible to load resources from
    different sources, e.g. from configuration files or from a database.
  </p>
  <p>
    In the following sub sections the interfaces and classes for loading and
    obtaining resource data are explained. Applications that need direct access
    to their resources can make use of these components. If the <em>builder
    framework</em> is used, it is often not necessary to deal with these classes
    directly, as builder scripts are inherently capable of accessing resources
    and configuring objects (e.g. GUI components or service beans) with them.
  </p>

  <subsection name="Fundamental interfaces">
  <p>
    The interfaces and classes related to resources are located in the
    <code>net.sf.jguiraffe.resources</code> packages. In this section we will
    introduce the most important interfaces.
  </p>
  <p>
    <ul>
    <li>A group of logically connected resources is represented by the
    <code><a href="../apidocs/net/sf/jguiraffe/resources/ResourceGroup.html">ResourceGroup</a></code>
    interface. A <code>ResourceGroup</code> contains texts in a specific
    language. Single elements of the group can be accessed using the
    <code>getResource()</code> method passing in an arbitrary object as resource
    key. The <code>getKeys()</code> method returns a set with all known keys
    in this <code>ResourceGroup</code>. A <code>ResourceGroup</code> is similar
    to a resource bundle with a specific base name. An application can create an
    arbitrary number of resource groups organizing its resources in several
    logic chunks. For smaller applications it can also make sense to store all
    resources in a single group.</li>
    <li>Resource groups are obtained by a
    <code><a href="../apidocs/net/sf/jguiraffe/resources/ResourceLoader.html">
    ResourceLoader</a></code> object. A <code>ResourceLoader</code> is rarely
    accessed by client code directly, it works behind the scenes. However, it
    plays an important role for the extensibility of the resources framework:
    By specifying an alternative <code>ResourceLoader</code> implementation a
    different strategy for locating resources can be activated. The
    <code>ResourceLoader</code> interface is pretty lean. It defines a single
    method for obtaining a <code>ResourceGroup</code> for a given name and
    <code>Locale</code>. An implementation can do whatever is necessary to
    retrieve the underlying resources and create a <code>ResourceGroup</code>
    object with this information. For instance, the default
    <code>ResourceLoader</code> implementation for resource bundles obtains
    the corresponding <code>java.util.ResourceBundle</code> for the group name
    and locale and creates a wrapper object around this bundle.</li>
    <li>Finally, there is the
    <code><a href="../apidocs/net/sf/jguiraffe/resources/ResourceManager.html">
    ResourceManager</a></code> interface, which is probably the most important
    interface from a client's point of view. <code>ResourceManager</code>
    provides several methods for accessing whole resource groups or single
    elements from specific resource groups. With these methods arbitrary
    resources can be obtained. The <em>JGUIraffe</em> library provides a default
    implementation of the <code>ResourceManager</code> interface. This
    implementation is fully functional, and it should hardly be necessary to
    provide a different implementation as customization can be done by
    injecting another <code>ResourceLoader</code> (<code>ResourceManager</code>
    has a <code>setResourceLoader()</code> for switching to a different
    <code>ResourceLoader</code> implementation).</li>
    </ul>
  </p>
  <p>
    This completes the introduction of the fundamental interfaces for dealing
    with resources. The following section is about making use of these
    interfaces.
  </p>
  </subsection>

  <subsection name="Using the ResourceManager interface">
  <p>
    The <code><a href="../apidocs/net/sf/jguiraffe/resources/ResourceManager.html">
    ResourceManager</a></code> interface provides a low-level API for accessing
    resources. For making use of this API, a <code>ResourceManager</code>
    instance has to be obtained first. This can be achieved by calling the
    <code>getResourceManager()</code> method of the current
    <code><a href="../apidocs/net/sf/jguiraffe/gui/app/ApplicationContext.html">
    ApplicationContext</a></code>. (The <code>ApplicationContext</code> should
    be available to all interested components in the application. The
    <code>ResourceManager</code> has been created and initialized from the
    application's configuration during the startup phase.) Actually, the
    <code>getResourceManager()</code> method is defined in the
    <code><a href="../apidocs/net/sf/jguiraffe/transform/TransformerContext.html">
    TransformerContext</a></code> interface, which is extended by
    <code>ApplicationContext</code>. Because a <code>TransformerContext</code>
    is passed to all <a href="validators.html">validators and transformers</a>
    these objects have convenient access to resources, too.
  </p>
  <p>
    For accessing a specific resource element a combined key consisting of two
    components has to be provided:
    <ul>
    <li>The <em>group ID</em> specifies the resource group the desired
    element belongs to.</li>
    <li>The actual <em>resource key</em> identifies the element in the resource
    group.</li>
    </ul>
    Both components of the resource key are of type <code>java.lang.Object</code>.
    So there is literally no constraint for resource keys. In practice however,
    most frequently strings will be used as keys. Of course, in addition to the
    key of the resource element the desired <code>Locale</code> must be passed in.
  </p>
  <p>
    <code>ResourceManager</code> defines two methods for obtaining single
    resource elements:
    <ul>
    <li><code>Object getResource(Locale locale, Object group, Object key)</code>
    returns a resource element as plain object.</li>
    <li><code>String getText(Locale locale, Object group, Object key)</code>
    works like <code>getResource()</code>, but performs a conversion of the
    resource object to string.</li>
    </ul>
    Both methods throw a (unchecked) <code>java.util.MissingResourceException</code>
    if the resource element cannot be resolved.
  </p>
  <p>
    If most of the resources are contained in a single resource group, it is
    cumbersome to always specify the resource group ID when calling the
    <code>getResource()</code> or <code>getText()</code> methods.
    <code>ResourceManager</code> provides the <code>setDefaultResourceGroup()</code>
    method. Here the ID of a resource group can be set. This ID is always used
    if no group ID is provided when querying a resource element.
  </p>
  <p>
    With the <code>getResourceGroup()</code> method a whole
    <code>ResourceGroup</code> can be obtained at once. From the
    <code>ResourceGroup</code> the single elements it contains can be queried
    later on. This can make sense if groups have a special meaning for the
    logic of an application. For instance, resource groups could be used as a
    kind of enumeration.
  </p>
  </subsection>

  <subsection name="The Message class">
  <p>
    Applications often have the use case to obtain an element from the resources,
    insert some parameters, and finally display it to the user. An example can
    be messages for validation errors: A validator might check whether an
    input field contains a valid number in a configurable range. If not, an
    error message like <em>Please enter a number between 0 and 100!</em> should
    be generated, where the numbers are obtained from the validator's
    configuration.
  </p>
  <p>
    For use cases like this the
    <code><a href="../apidocs/net/sf/jguiraffe/resources/Message.html">
    Message</a></code> class can be used. A <code>Message</code> instance stores
    the ID of a resource element (consisting of a resource group ID and a
    resource key) and an arbitrary number of parameters. Creating the instance
    does not actually involve a resource look-up, rather the resource ID and
    the parameters are stored. When the final text is needed the
    <code>resolve()</code> method has to be called. <code>resolve()</code>
    expects the current <code>ResourceManager</code> and the <code>Locale</code>
    as parameters. It obtains the resource text from the
    <code>ResourceManager</code>, processes the parameters, and returns the
    result.
  </p>
  <p>
    Internally, <code>Message</code> uses the <code>java.text.MessageFormat</code>
    class for dealing with parameters. So the typical <em>message format
    patterns</em> used by this class can be placed in the resources. For instance,
    the error message of the numeric range validator could be defined in a
    resource properties file as follows:
    <source><![CDATA[
ERR_RANGE = Please enter a number between {0} and {1}!
    ]]></source>
    When creating the <code>Message</code> object two parameters for the
    minimum and maximum value must be passed in.
    <source><![CDATA[
Message msg = new Message("validationerrors", "ERR_RANGE",
    getMinimum(), getMaximum());
    ]]></source>
  </p>
  <p>
    There are multiple constructors for different use cases. The easiest
    constructor only expects a resource key and assumes that the default
    resource group is used. Another constructor takes the ID of the resource
    group, the resource key and an arbitrary number of parameter objects as a
    vararg argument. Once created, <code>Message</code> instances are
    immutable and thus can be shared safely between multiple threads. By the
    way: the default implementations of the resources interfaces shipped with
    the library are all thread-safe.
  </p>
  </subsection>

  <subsection name="Convenience methods">
  <p>
    Because GUI applications typically access resources frequently there are
    some convenience methods to simplify this task. They are defined by the
    <code><a href="../apidocs/net/sf/jguiraffe/gui/app/ApplicationContext.html">
    ApplicationContext</a></code> interface, which plays an important role for
    the whole application.
  </p>
  <p>
    <code>ApplicationContext</code> defines some overloaded <code>getResource()</code>
    and <code>getResourceText()</code> methods which are thin wrappers around
    the corresponding methods of <code>ResourceManager</code>. Because the
    context already knows the current <code>Locale</code> and has a reference
    to the <code>ResourceManager</code>, all the caller has to specify is the
    ID of the resource to be obtained. This can be done in several ways:
    <ul>
      <li>as two objects for the ID of the resource group and the resource key,</li>
      <li>as a <code><a href="../apidocs/net/sf/jguiraffe/resources/Message.html">
      Message</a></code> object: in this case the resource ID is stored in the
      <code>Message</code> object, which can also define additional parameters
      to be inserted into the resource text,</li>
      <li>as a single object: if this object happens to be a <code>Message</code>
      object, it is evaluated as described above; otherwise the object is
      interpreted as resource key, and the default resource group is assumed.</li>
    </ul>
  </p>
  <p>
    Another method of <code>ApplicationContext</code> that is related to
    resource handling is the <code>messageBox()</code> method. As the name
    implies, this method displays a typical message dialog, which can be used
    for instance for error or confirmation messages. The title and the text
    content of this dialog are also obtained from the application's resources.
    Again, both can be specified as resource keys or as <code>Message</code>
    objects. (<em>Note:</em> If the title or the text of the message box should
    not be obtained from resources but specified as plain text, the
    <code><a href="../apidocs/net/sf/jguiraffe/gui/builder/utils/MessageOutput.html">
    MessageOutput</a></code> object maintained by the <code>ApplicationContext</code>
    can be used directly.)
  </p>
  </subsection>

  <subsection name="Using Java resource bundles">
  <p>
    <em>JGUIraffe</em> ships with an implementation of the
    <code><a href="../apidocs/net/sf/jguiraffe/resources/ResourceLoader.html">
    ResourceLoader</a></code> interface that obtains its data from the standard
    resource bundles available in Java (i.e. the
    <code>java.util.ResourceBundle</code> class). This implementation is used
    per default, so no additional configuration is needed. The implementation
    class is
    <code><a href="../apidocs/net/sf/jguiraffe/resources/impl/bundle/BundleResourceLoader.html">
    BundleResourceLoader</a></code>. Using this default implementation is
    straight forward. The resource group names used by the
    <code>ResourceManager</code> are mapped directly to names of resource
    bundles that are passed to the <code>getBundle()</code> method of
    <code>java.util.ResourceBundle</code>. So resources can be created in the
    usual way, e.g. as properties files.
  </p>
  <p>
    As an example we create a very simple resource bundle using properties files.
    <code>testresources.properties</code> (shown below) contains the default
    resource texts. (Note: when building the application the build process has
    to ensure that this file is copied to the class path on the root level, i.e.
    it must not be added to a specific package.)
    <source><![CDATA[
# Test resources in English
test1 = Hello
test2 = OK
test3 = Cancel
test4 = Hello world!
    ]]></source>
  </p>
  <p>
    Now texts for resource have been defined in English. For users in different
    countries additional properties files can be created that contains the texts
    in their specific language. The following listing shows a properties file
    with German resource texts. This file must be stored under the name
    <code>testresources_de.properties</code>. Note that the language code is
    appended to the name of the resource bundle. This has nothing to do with
    the implementation provided by <em>JGUIraffe</em>, but is a requirement of
    the <code>java.util.ResourceBundle</code> class; please refer to the
    documentation of this class for further information. Here is the content of
    the German resource properties file:
    <source><![CDATA[
# Test resources in German
test1 = Guten Tag
test2 = Fertig
test3 = Abbrechen
]]></source>
  </p>
  <p>
    Note that this file does not define the key <code>test4</code> as does the
    default version of the resource file. This is totally valid, you can choose
    to provide translations for only a subset of the resource texts. If the
    application requests the resource for the key <code>test4</code> for the
    German <code>Locale</code>, <code>ResourceBundle</code> finds out that this
    key is not defined in the specific properties file with the German
    translation; it then returns the value from the default properties file
    (i.e. the English text <em>Hello world!</em> in this example).
  </p>
  <p>
    Accessing these resource texts from a <em>JGUIraffe</em> application is very
    easy: Just use the name of the resource bundle as resource group name. The
    bundle name is <code>testresources</code>, so we can write (provided that
    the variable <code>appCtx</code> refers to the <code>ApplicationContext</code>
    object):
    <source><![CDATA[
String msg = appCtx.getResourceText("testresources", "test1");
]]></source>
    For an English user the string <code>msg</code> should now contain the text
    <em>Hello</em>. If the major part of our resource texts was stored in the
    <code>testresources</code> bundle, we could make this bundle to the
    default resource group. Then we would only have to provide the resource key
    when accessing resources and could ommit the resource group name. This can
    be done either programmatically as in the following fragment;
    <source><![CDATA[
appCtx.getResourceManager().setDefaultResourceGroup("testresources");
// now access to resources is simplified:
String msg = appCtx.getResourceText("test1");
]]></source>
    Alternatively, the default resource group can be set in the application's
    configuration file. The corresponding fragment can look as follows:
    <source><![CDATA[
<config>
  <framework>
    <appctx>
      <locale>en</locale>
      <defaultResourceGroup>testresources</defaultResourceGroup>
    </appctx>
]]></source>
    Here also the default <code>Locale</code> is set.
  </p>
  </subsection>
  </section>
</body>

</document>